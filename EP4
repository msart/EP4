public class EP4 {
    private SymbolGeoEWDigraph gps;
    private Location screenLower;
    private Location screenUpper;
    private Bag<DirectedEdge> blueEdges; // conjunto de edges azuis, pintadas ao se buscar o menor caminho
        
    public EP4(String fileXML, String fileAdjList) {
        gps = new SymbolGeoEWDigraph(fileXML, fileAdjList);
        StdDraw.setCanvasSize(600, 600);
        blueEdges = new Bag<DirectedEdge>();
    }
    
    public void draw(Location lower, Location upper) {
        StdDraw.clear();
        StdDraw.setPenColor();
        screenLower = lower;
        screenUpper = upper;
        StdDraw.setXscale(lower.longitude(), upper.longitude()); // longitudes;
        StdDraw.setYscale(lower.latitude(), upper.latitude()); // latitudes;
        
        // desenhando pontos
        for (String node : gps.locations().nodes()) {
            Location location = gps.locations().get(node);
            if (location.interval(lower, upper))
                StdDraw.filledCircle(location.longitude(), location.latitude(), 0.000025);
        }
        
        // desenhando arestas
        for (DirectedEdge e : gps.map().G().edges()) {
            StdDraw.setPenColor();
            Location lineFrom = gps.locations().get(gps.map().name(e.from()));
            Location lineTo = gps.locations().get(gps.map().name(e.to())); 
            StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
            StdDraw.setPenColor(StdDraw.RED);
            StdDraw.filledCircle((3*lineTo.longitude() + lineFrom.longitude())/4, (3*lineTo.latitude() + lineFrom.latitude())/4, 0.000025);
        }
    }
    
    public void update(String flag, Location lower, Location upper) {
        if (!flag.equals("--noedges") && !flag.equals("--edges")) {
            StdOut.println("Flag inválida!");
            return;
        }
        StdDraw.clear();
        StdDraw.setPenColor();
        screenLower = lower;
        screenUpper = upper;
        StdDraw.setXscale(lower.longitude(), upper.longitude()); // longitudes;
        StdDraw.setYscale(lower.latitude(), upper.latitude()); // latitudes;
        // desenhando pontos
        for (String node : gps.locations().nodes()) {
            Location location = gps.locations().get(node);
            if (location.interval(lower, upper))
                StdDraw.filledCircle(location.longitude(), location.latitude(), 0.000025);
        }
        
        if (flag.equals("--noedges")) return;
        // desenhando arestas
        for (DirectedEdge e : gps.map().G().edges()) {
            StdDraw.setPenColor();
            Location lineFrom = gps.locations().get(gps.map().name(e.from()));
            Location lineTo = gps.locations().get(gps.map().name(e.to())); 
            StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
            StdDraw.setPenColor(StdDraw.RED);
            StdDraw.filledCircle((3*lineTo.longitude() + lineFrom.longitude())/4, (3*lineTo.latitude() + lineFrom.latitude())/4, 0.000025);
        }
        for (DirectedEdge e : blueEdges) {
            StdDraw.setPenRadius(0.004);
            StdDraw.setPenColor(StdDraw.BLUE);
            Location lineFrom = gps.locations().get(gps.map().name(e.from()));
            Location lineTo = gps.locations().get(gps.map().name(e.to())); 
            StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
        }
    }
    
    public void path(Location origin, Location destination) {
        Double minOriginDist = 40075.0; // comprimento da linha do Equador (em km)
        Double minDestinationDist = 40075.0; // distancia maxima entre 2 pontos
        String nodeOrigin = "";
        String nodeDestination = "";
        for (String nodeCurrent : gps.locations().nodes()) {
            Location locationCurrent = gps.locations().get(nodeCurrent);
            if (locationCurrent.distance(origin) < minOriginDist) {
                nodeOrigin = nodeCurrent;
                minOriginDist = locationCurrent.distance(origin);
            }
            if (locationCurrent.distance(destination) < minDestinationDist) {
                nodeDestination = nodeCurrent;
                minDestinationDist = locationCurrent.distance(destination);
            }
        }
        int nodeFrom = gps.map().index(nodeOrigin.toString());
        int nodeTo = gps.map().index(nodeDestination.toString());
        DijkstraSP shortestPath = new DijkstraSP(gps.map().G(), nodeFrom);
        if (shortestPath.hasPathTo(nodeTo)) {
            StdOut.printf("Distancia : (%.2f)km\n", shortestPath.distTo(nodeTo));
            for (DirectedEdge e : shortestPath.pathTo(nodeTo)) {
                StdDraw.setPenRadius(0.004);
                StdDraw.setPenColor(StdDraw.BLUE);
                Location lineFrom = gps.locations().get(gps.map().name(e.from()));
                Location lineTo = gps.locations().get(gps.map().name(e.to())); 
                StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
                blueEdges.add(e);
            }
            StdDraw.setPenRadius();
        }
        
        else StdOut.println("NÃ£o existe caminho");
    }
    
    public void clear() {
        StdDraw.clear();
        StdDraw.setPenColor();
        blueEdges = new Bag<DirectedEdge>();
        Location lower = screenLower;
        Location upper = screenUpper;
        StdDraw.setXscale(lower.longitude(), upper.longitude()); // longitudes;
        StdDraw.setYscale(lower.latitude(), upper.latitude()); // latitudes;
        
        // desenhando pontos
        for (String node : gps.locations().nodes()) {
            Location location = gps.locations().get(node);
            if (location.interval(lower, upper))
                StdDraw.filledCircle(location.longitude(), location.latitude(), 0.000025);
        }
        
        // desenhando arestas
        for (DirectedEdge e : gps.map().G().edges()) {
            StdDraw.setPenColor();
            Location lineFrom = gps.locations().get(gps.map().name(e.from()));
            Location lineTo = gps.locations().get(gps.map().name(e.to())); 
            StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
            StdDraw.setPenColor(StdDraw.RED);
            StdDraw.filledCircle((3*lineTo.longitude() + lineFrom.longitude())/4, (3*lineTo.latitude() + lineFrom.latitude())/4, 0.000025);
        }
    }
    
    public static void main(String[] args) {
        String fileXML = args[0];
        String fileAdjList = args[1]; 
        EP4 screen = new EP4(fileXML, fileAdjList);
       
        while (StdIn.hasNextLine()) {
            String[] command = StdIn.readLine().split(" ");
            
            if (command[0].equals("draw")) {
                Location lower = new Location(Double.parseDouble(command[1]), Double.parseDouble(command[2]));
                Location upper = new Location(Double.parseDouble(command[3]), Double.parseDouble(command[4]));
                screen.draw(lower, upper);
            }
            
            else if (command[0].equals("update")) {
                Location lower = new Location(Double.parseDouble(command[2]), Double.parseDouble(command[3]));
                Location upper = new Location(Double.parseDouble(command[4]), Double.parseDouble(command[5]));
                screen.update(command[1], lower, upper);
            }
            
            else if (command[0].equals("path")) {
                Location origin;
                Location destination;
                
                if (command[1].equals("--mouse")) {
                    int pressed = 0;
                    double x1 = 0;
                    double x2 = 0;
                    double y1 = 0;
                    double y2 = 0;
                    
                    // ponto de origem
                    while (pressed < 1){
                        if (StdDraw.mousePressed()) {
                            while(StdDraw.mousePressed()){
                                x1 = StdDraw.mouseX();
                                y1 = StdDraw.mouseY();
                            }
                            pressed ++;
                        }
                    }
                    // ponto de destino
                    while (pressed < 2){
                        if (StdDraw.mousePressed()) {
                            while(StdDraw.mousePressed()){
                                x2 = StdDraw.mouseX();
                                y2 = StdDraw.mouseY();
                                pressed ++;
                            }
                        }
                    }
                    origin = new Location(y1, x1);
                    destination = new Location(y2, x2);
                }
                // se nao houver flag, o usuario utilizara o teclado
                else { 
                    origin = new Location(Double.parseDouble(command[1]), Double.parseDouble(command[2]));
                    destination = new Location(Double.parseDouble(command[3]), Double.parseDouble(command[4]));
                }
                
                screen.path(origin, destination);
            }
            
            else if (command[0].equals("clear")) {
                screen.clear();
            }
            
            else StdOut.println("Comando inválido!");
        }
    }
}

