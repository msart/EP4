public class EP4 {
    public static void main(String[] args) {
        String fileXML = args[0];
        String fileAdjList = args[1];
        
        SymbolGeoEWDigraph gps = new SymbolGeoEWDigraph(fileXML, fileAdjList);
        
        StdDraw.setCanvasSize(600, 600);
        
        while (StdIn.hasNextLine()) {
            String[] command = StdIn.readLine().split(" ");
            
            // desenhar o mapa a partir dos pontos inferior esquerdo e superior direito;
            if (command[0].equals("draw")) {
                StdDraw.clear();
                StdDraw.setPenColor();
                Location lower = new Location(Double.parseDouble(command[1]), Double.parseDouble(command[2]));
                Location upper = new Location(Double.parseDouble(command[3]), Double.parseDouble(command[4]));
                StdDraw.setXscale(lower.longitude(), upper.longitude()); // longitudes;
                StdDraw.setYscale(lower.latitude(), upper.latitude()); // latitudes;
                
                // desenhando pontos
                for (double node : gps.locations().nodes()) {
                    Location location = gps.locations().get(node);
                    if (location.interval(lower, upper))
                        StdDraw.point(location.longitude(), location.latitude());
                }
                
                // desenhando arestas
                for (DirectedEdge e : gps.map().G().edges()) {
                    StdDraw.setPenColor();
                    Location lineFrom = gps.locations().get(Double.parseDouble(gps.map().name(e.from())));
                    Location lineTo = gps.locations().get(Double.parseDouble(gps.map().name(e.to()))); 
                    StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
                    StdDraw.setPenColor(StdDraw.RED);
                    StdDraw.filledCircle((3*lineTo.longitude() + lineFrom.longitude())/4, (3*lineTo.latitude() + lineFrom.latitude())/4, 0.000025);
                }
            }
            
            if (command[0].equals("update")) {
                StdDraw.clear();
                StdDraw.setPenColor();
                Location lower = new Location(Double.parseDouble(command[2]), Double.parseDouble(command[3]));
                Location upper = new Location(Double.parseDouble(command[4]), Double.parseDouble(command[5]));
                StdDraw.setXscale(lower.longitude(), upper.longitude()); // longitudes;
                StdDraw.setYscale(lower.latitude(), upper.latitude()); // latitudes;
                
                // desenhando pontos
                for (double node : gps.locations().nodes()) {
                    Location location = gps.locations().get(node);
                    if (location.interval(lower, upper))
                        StdDraw.point(location.longitude(), location.latitude());
                }
                
                if (!command[1].equals("--noedges")) {
                    for (DirectedEdge e : gps.map().G().edges()) {
                    StdDraw.setPenColor();
                    Location lineFrom = gps.locations().get(Double.parseDouble(gps.map().name(e.from())));
                    Location lineTo = gps.locations().get(Double.parseDouble(gps.map().name(e.to()))); 
                    StdDraw.line(lineFrom.longitude(), lineFrom.latitude(), lineTo.longitude(), lineTo.latitude());
                    StdDraw.setPenColor(StdDraw.RED);
                    StdDraw.filledCircle((3*lineTo.longitude() + lineFrom.longitude())/4, (3*lineTo.latitude() + lineFrom.latitude())/4, 0.000025);
                    }
                }
            }
            
            if (command[0].equals("path")) {
            }
            
        }
    }
}
